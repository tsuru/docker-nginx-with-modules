worker_processes  1;

include modules/all.conf;

daemon off;

events {
    worker_connections  1024;
}

http {

    geoip2 GeoIP2-Country-Test.mmdb {
        $geoip2_data_continent_code continent code;
    }

    push_stream_shared_memory_size 1M;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    proxy_cache_path /var/cache/nginx keys_zone=cache_zone:100m;

    vhost_traffic_status_zone;
    vhost_traffic_status_histogram_buckets 0.002 0.005 0.01 0.02 0.05 0.1 0.2 0.5 1 2 5 10 15 20;

    server {
        listen 8080;
        listen 8443 ssl http2;

        ssl_certificate cert.pem;
        ssl_certificate_key key.pem;

        location /channels-stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            push_stream_channels_path               $arg_id;
        }

        location /status {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }

        location /lua_content {
            # MIME type determined by default_type:
            default_type 'text/plain';

            content_by_lua_block {
                ngx.say('Hello,world!')
            }
        }

         location /lua_http_resty {
            # MIME type determined by default_type:
            default_type 'text/plain';

            content_by_lua_block {
                local cjson = require("cjson");
                local httpc = require("resty.http").new();

                local res, err = httpc:request_uri("http://127.0.0.1:8080/", {
                    method = "GET",
                })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    ngx.status = 500
                    return
                end

                ngx.say(cjson.encode({proxied = true, body=res.body}))

            }
        }

        location ~ ^/purge/(.+) {
           proxy_cache_purge  cache_zone $1$is_args$args;
        }

        location / {
            more_set_headers        'X-MyHeader: blah' 'X-MyHeader2: foo';
            echo                    'nginx config check ok';
        }
    }
}
